# Juniper NSM
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "JUNIPER_NSM" "parser" "rfc3164" }}
{{- tmpl.Exec "t/source_network.t" $context }}

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_JUNIPER_NSM_TCP_PORT")) (getenv  (print "SC4S_LISTEN_JUNIPER_NSM_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_JUNIPER_NSM_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for JUNIPER_NSM traffic
            source (s_JUNIPER_NSM);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for JUNIPER_NSM traffic
            source (s_DEFAULT);
            filter(f_is_rfc3164);
            filter(f_juniper_nsm);
            flags(final);
        };
    };

    rewrite {
        set("juniper_nsm", value("fields.sc4s_vendor_product"));
        r_set_splunk_dest_default(sourcetype("juniper:nsm"), index("netfw"))
    };
    parser { p_add_context_splunk(key("juniper_nsm")); };
    parser (compliance_meta_by_source);
    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_msg))" value("MSG")); };

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_JUNIPER_NSM_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_JUNIPER_NSM" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_JUNIPER_NSM_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_JUNIPER_NSM_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

    flags(flow-control,final);
};
