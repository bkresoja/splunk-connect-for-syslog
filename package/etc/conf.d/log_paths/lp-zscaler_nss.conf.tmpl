# Zscaler
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "ZSCALER_NSS" "parser" "rfc3164" }}
{{- tmpl.Exec "t/source_network.t" $context }}

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_ZSCALER_NSS_TCP_PORT")) (getenv  (print "SC4S_LISTEN_ZSCALER_NSS_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_ZSCALER_NSS_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for ZSCALER_NSS traffic
            source (s_ZSCALER_NSS);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for ZSCALER_NSS traffic
            source (s_DEFAULT);
            filter(f_zscaler_nss);
            flags(final);
        };
    };

    parser { date-parser(format("%Y-%m-%d %H:%M:%S") template('$(substr "$LEGACY_MSGHDR$MSG" "0" "19")') flags(guess-timezone)); };
    rewrite {
        set("zscaler_nss", value("fields.sc4s_vendor_product"));
        subst("^[^\t]+\t", "", value("MESSAGE"), flags("global"));
    };
    parser {
        #basic parsing
        kv-parser(prefix(".kv.") pair-separator("\t") template("${MSG}"));
    };

    if (match("alerts" value(".kv.product"))) {
       rewrite { r_set_splunk_dest_default(sourcetype("zscalernss-alerts"), index("main"))};
       parser { p_add_context_splunk(key("zscaler_alerts")); };
    } elif (match("dns" value(".kv.product"))) {
       rewrite { r_set_splunk_dest_default(sourcetype("zscalernss-dns"), index("netdns"))};
       parser { p_add_context_splunk(key("zscaler_dns")); };
    } elif (match("fw" value(".kv.product"))) {
       rewrite { r_set_splunk_dest_default(sourcetype("zscalernss-fw"), index("netfw"))};
       parser { p_add_context_splunk(key("zscaler_fw")); };
    } elif (match("NSS" value(".kv.product"))) {
       rewrite { r_set_splunk_dest_default(sourcetype("zscalernss-web"), index("netproxy"))};
       parser { p_add_context_splunk(key("zscaler_web")); };
    } elif (match("audit" value(".kv.product"))) {
       rewrite { r_set_splunk_dest_default(sourcetype("zscalernss-zia-audit"), index("netops"))};
       parser { p_add_context_splunk(key("zscaler_zia_audit")); };
    } elif (match("sandbox" value(".kv.product"))) {
       rewrite { r_set_splunk_dest_default(sourcetype("zscalernss-zia-sandbox"), index("main"))};
       parser { p_add_context_splunk(key("zscaler_zia_sandbox")); };
    } elif (match("zpa" value(".kv.product"))) {
       rewrite { r_set_splunk_dest_default(sourcetype("zscalernss-zpa-app"), index("netids"))};
       parser { p_add_context_splunk(key("zscaler_zpa")); };
    } elif (match("zpa_auth" value(".kv.product"))) {
       rewrite { r_set_splunk_dest_default(sourcetype("zscalernss-zpaauth"), index("netauth"))};
       parser { p_add_context_splunk(key("zscaler_zpa_auth")); };
    } elif (match("zpa_auth_connector" value(".kv.product"))) {
       rewrite { r_set_splunk_dest_default(sourcetype("zscalernss-zpa-connector"), index("netops"))};
       parser { p_add_context_splunk(key("zscaler_zpa_connector")); };
    } elif (match("zpa_bba" value(".kv.product"))) {
       rewrite { r_set_splunk_dest_default(sourcetype("zscalernss-bba"), index("main"))};
       parser { p_add_context_splunk(key("zscaler_zpa_bba")); };
    } else {
        rewrite { r_set_splunk_dest_default(sourcetype("zscalernss-unknown"), index("main"))};
        parser {
            p_add_context_splunk(key("zscaler_nss"));
        };
    };

    parser (compliance_meta_by_source);
    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_msg_only))" value("MSG")); };

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_ZSCALER_NSS_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_ZSCALER_NSS" "no")) }}
    destination(d_archive);
{{- end}}

    flags(flow-control,final);
};
